{"version":3,"sources":["components/AppHeader/logo.png","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/AppHeader/AppHeader.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableData","styled","td","TDControl","Button","button","Coin","props","name","ticker","price","showBalance","balance","action","className","onClick","event","preventDefault","handleRefresh","id","handleTransaction","Table","table","CoinList","coinData","map","key","Section","section","BalanceButton","Balance","div","AccountBalance","buttonText","content","buttonClass","amount","handleVisibilityChange","handleAirdrop","AppHeader","src","logo","alt","Component","Footer","href","StyledDiv","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","isBuy","balanceChange","oldBalance","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e507cc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d68962ad.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\nconst TableData = styled.td`\n    border: 1px solid;\n    width: 36vh;\n    color: dimgray;\n    background-color: seashell;\n    text-align: center;\n    margin: 50px auto 50px auto;\n    font-size: 1.4rem;\n    \n`;\nconst TDControl = styled(TableData)`\n    width: 36vw;\n`;\n\nconst Button = styled.button`\n    font-size: 12 px; \n    width: 64px;\n    line-height: 12 px; \n    padding: 4px; \n    border-radius: 5px; \n    margin: 3px 5px 0;\n    border: 2px solid rgb(28, 110, 164); \n`;\n\nexport default function Coin(props) {\n\n    const handleRefresh = (event) => {\n        event.preventDefault();\n        props.handleRefresh(props.id);\n    }\n    const handleBuy = (event) => {\n        event.preventDefault();\n        props.handleTransaction(true, props.id);\n    }\n    const handleSell = (event) => {\n        event.preventDefault();\n        props.handleTransaction(false, props.id);\n    }\n\n    return (\n        <tr>\n            <TableData>{props.name}</TableData>\n            <TableData>{props.ticker}</TableData>\n            <TableData>${props.price}</TableData>\n            {props.showBalance ? <TableData>{props.balance}</TableData> : null}\n            <TDControl>\n                <form action=\"\">\n                    <Button className='btn btn-info' \n                            onClick={handleRefresh}>\n                        Refresh\n                    </Button>\n                    <Button className='btn btn-warning' \n                            onClick={handleBuy}>\n                        Buy\n                    </Button>\n                    <Button className='btn btn-danger' \n                            onClick={handleSell}>\n                        Sell\n                    </Button>\n                </form>\n            </TDControl>\n        </tr>\n    );\n}\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react'\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\n\nconst Table = styled.table`\n    margin: 50px auto 50px auto;\n    display: inline-block;\n    font-size: 1.4rem;\n    `;\n\nexport default function CoinList (props) {\n    return (\n        <Table>\n        <thead>\n        <tr>\n            <th>Name</th>\n            <th>Ticker</th>\n            <th>Price</th>\n            {props.showBalance ? <th>Balance</th> : null}\n            <th>Action</th>\n        </tr>\n        </thead>\n        <tbody>\n        {\n            props.coinData.map( ({key, name, ticker, price, balance}) =>\n            <Coin key={key} \n                handleRefresh={props.handleRefresh}\n                handleTransaction={props.handleTransaction}\n                name={name} \n                id = {key} \n                price={price} \n                ticker={ticker}\n                showBalance={props.showBalance}\n                balance={balance} \n                />\n            )\n        }\n        </tbody>\n    </Table>\n    )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nconst Button = styled.button`\n    margin: 0 8px;\n`;\n\nconst BalanceButton = styled(Button)\n`\n    width: 150px;\n`;\nconst Balance = styled.div\n`\n    min-width: 250px;\n    margin: 0.5rem 0 0 2.5rem;\n    font-size: 2.5em;\n    vertical-align: middle;\n`;\n\n\nexport default function AccountBalance (props) {\n    const buttonText = props.showBalance ? 'Hide balance': 'Show balance';\n    let content = '\\u00A0';\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-default' : 'btn-info');\n    if ( props.showBalance ) {\n        content = <>Balance: $ {props.amount}</>\n    }\n\n    return (\n        <>\n            <Balance>\n                {content}\n            </Balance>\n            <Section>\n                <BalanceButton onClick={props.handleVisibilityChange}\n                        className={buttonClass}>\n                    {buttonText}\n                </BalanceButton>\n                <Button onClick={props.handleAirdrop}\n                        className=\"btn btn-success\">\n                            <i className=\"fas fa-rocket\"></i>\n                            AirDrop\n                </Button>\n            </Section>\n        </>\n    )\n    \n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport logo from './logo.png';\nimport './AppHeader.css'\n\nexport default class AppHeader extends Component {\n    render() {\n        return (\n          <header className=\"Header\">\n          <img src={logo} alt=\"Top 10 Coins\" className=\"App-logo\" />\n            <h1 className=\"Title\">\n            Top 10 Crypto Coins\n            </h1>\n          </header>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './Footer.css'\n\nexport default class Footer extends Component{\n    render(){\n        return (\n            <footer className=\"footer\">\n            <div>\n                <div>\n                    <p>Powered by <a className=\"link\" href=\"https://coinpaprika.com/\">coinpaprika.com</a></p>\n                </div>\n                <hr/>\n                <div>\n                    <p >Designed by: <a className=\"link\" href=\"https://github.com/Maar-io\">Maar.io</a></p>\n                </div>\n            </div>\n            </footer>\n        );\n    }\n}","import React, {useState, useEffect} from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport Footer from './components/Footer/Footer'\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n//import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootswatch/dist/slate/bootstrap.min.css'\nimport '@fortawesome/fontawesome-free/js/all'\n\nconst StyledDiv = styled.div`\nbackground-color: #282c34;\ntext-align: center;\ncolor: seashell;\n`;\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(20000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  // this is local componentDidMount, not from React statefull component\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) { \n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    });\n    setCoinData(coinPriceData);\n  }  \n  \n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  });\n\n\n  const handleVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    debugger;\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = { ...values };\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    \n    setCoinData(newCoinData);\n  }\n\n  const handleTransaction = (isBuy, valueChangeId) => { \n    const balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( function( values ) {\n      let newValues = { ...values };\n      if ( valueChangeId === values.key ) {\n        newValues.balance += balanceChange;\n        setBalance( oldBalance => oldBalance - balanceChange * newValues.price );\n      }\n      return newValues;\n    });    \n    setCoinData(newCoinData);\n  }\n\n  const handleAirdrop = () => {\n    setBalance(oldValue => oldValue + 1200);\n  }\n\n  return (\n    <StyledDiv className=\"App\">\n      <AppHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleVisibilityChange={handleVisibilityChange} \n        handleAirdrop={handleAirdrop}/>\n      <CoinList \n        coinData={coinData} \n        showBalance={showBalance}\n        handleRefresh={handleRefresh} \n        handleTransaction={handleTransaction}/>\n      <Footer/>\n    </StyledDiv>\n  );\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}